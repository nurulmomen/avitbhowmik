---
layout: post
title: "R or Python?"
date: 2016-02-16
description: 
image: /assets/images/rpython.jpg
credit: "Image credit: Jacob Bedard"
author: Avit K. Bhowmik
tags: 
  - R
  - Data
  - Python
  - Geospatial
---

I have been facing this question since 2012, during my job at the [Institute for Geoinformatics](https://www.uni-muenster.de/Geoinformatics/en/), and have recently discussed it with my colleagues at [Stockholm Resilience Centre](https://www.stockholmresilience.org/). I am surrounded by modellers who prefer Python over R, more for tradition than practicality in my opinion.

R and Python are both object oriented scripting languages, where, originally, R was designed for statistical analyses and Python for software and application development. I have worked with both (from coding architecture they are not much different), however, have always preferred R, not only because that my activities were more concentrated on the data analysis part than the software development but also because of the type of data I was analyzing, i.e. large scale spatiotemporal data.

<p style="text-align:center"><img src="https://www.orison.biz/blogs/ch3ckmat3/wp-content/uploads/2015/06/r-vs-python-header.png"></p>

The figure is created and copyrighted by datacamp, and is only symbolically used in this post. See [here](http://www.orison.biz/blogs/ch3ckmat3/2015/06/r-vs-python-for-data-science/) for the details on this figure.

R is the most advanced tool in the market for spatiotemporal geostatistics (with the ['gstat'](https://cran.r-project.org/web/packages/gstat/index.html) and ['spacetime'](https://cran.r-project.org/web/packages/spacetime/index.html) packages) and raster data analyses (with the ['raster'](https://cran.r-project.org/web/packages/raster/index.html) package). It offers an unique ground for storing and integrating space and time attributes of data, and enables their implementation and integration through the analyses. Raster data analysis has not only become faster and more efficient than before but also more intuitive. The thing I love about R is it's capability of co-interfacing with a wide range of software that is much more vast than Python. In fact, it provides packages to co-interface with Python itself (with the ['rpython'](http://rpython.r-forge.r-project.org/) package for example), and also allows for using Python's spatial modules (with the ['RPyGeo'](https://cran.r-project.org/web/packages/RPyGeo/index.html) package). Moreover, R is much more user friendly than Python in terms of compact coding, i.e. integrating several functions in one line of code. People may argue that Python has the advantage in software development, but I have developed [two tools](https://github.com/AvitBhowmik) so far using R and without needing Python.

A few recent discussions in [Quora](https://www.quora.com/Is-python-better-than-R) and [datacamp](http://www.orison.biz/blogs/ch3ckmat3/2015/06/r-vs-python-for-data-science/) also eventually voted for R.
